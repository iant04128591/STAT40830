library(dplyr)
data  %>% select(cnt = metadata$count)
str(data$metadata)
summary <- list()
data <- getSeismicData(timeFrame = 'PAST_WEEK', minMagnitude = 'all')
getSummaryStats <- function(timeFrame = c('PAST_HOUR','PAST_DAY','PAST_WEEK','PAST_MONTH'),
minMagnitude = c('all','1.0','2.5','4.5')){
# data <- getSeismicData(timeFrame = 'PAST_WEEK', minMagnitude = 'all')
summary <- list()
summary$description <- data$metadata$title
summary$frequency <- data$metadata$count
return(summary)
}
getSummaryStats(timeFrame = 'PAST_HOUR', minMagnitude = 'all')
data$features
data$bbox
data$type
str(data$features)
data$features$properties
data$features$properties %>% str
data$features$properties %>% select(mag)
data$features$properties %>% select(mag,time)
data$features$properties %>% transmute(magnitude=mag,day=as.POSIXct(data$features[i,]$properties$time/1000, origin="1970-01-01"))
data$features$properties %>% transmute(magnitude=mag,day=as.POSIXct(time/1000, origin="1970-01-01"))
data$features$properties %>% transmute(magnitude=mag,day=round(as.POSIXct(time/1000, origin="1970-01-01")))
data$features$properties %>% transmute(magnitude=mag,day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days'))
data$features$properties$time
as.POSIXct(data$features$properties$time/1000, origin="1970-01-01")
str(as.POSIXct(data$features$properties$time/1000, origin="1970-01-01"))
round(as.POSIXct(data$features$properties$time/1000, origin="1970-01-01"),units='days')
unique(round(as.POSIXct(data$features$properties$time/1000, origin="1970-01-01"),units='days'))
data$features$properties$time %>% round(as.POSIXct(./1000, origin="1970-01-01"),units='days'))
data$features$properties$time
data$features$properties$time %>% round(as.POSIXct(./1000, origin="1970-01-01"),units='days'))
round(as.POSIXct(data$features$properties$time/1000, origin="1970-01-01"),units='days'))
round(as.POSIXct(data$features$properties$time/1000, origin="1970-01-01"),units='days')
data$features$properties$time %>% round(as.POSIXct(./1000, origin="1970-01-01"),units='days')
data$features$properties$time %>% ./1000 %>% round(as.POSIXct(, origin="1970-01-01"),units='days')
data$features$properties$time %>% ./1000 %>% round(as.POSIXct(., origin="1970-01-01"),units='days')
data$features$properties$time/1000 %>% round(as.POSIXct(., origin="1970-01-01"),units='days')
round(as.POSIXct(data$features$properties$time/1000, origin="1970-01-01"),units='days')
data$features$properties %>% transmute(magnitude=mag,day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days'))
round(as.POSIXct(data$features$properties$time/1000, origin="1970-01-01"),units='days')
group_by
?group_by
by_cyl <- group_by(mtcars, cyl)
by_cyl
round(as.POSIXct(data$features$properties$time/1000, origin="1970-01-01"),units='days')
round(as.POSIXct(data$features$properties$time/1000, origin="1970-01-01"),units='days')  %>% str
round(as.POSIXct(data$features$properties$time/1000, origin="1970-01-01"),units='days')  %>% as.integer
round(as.POSIXct(data$features$properties$time/1000, origin="1970-01-01"),units='days')  %>% as.numeric
source('~/Documents/git/STAT40830/w6/getSeismicData.R')
data <- getSeismicData(timeFrame = 'PAST_WEEK', minMagnitude = 'all')
library(dplyr)
data <- getSeismicData(timeFrame = 'PAST_WEEK', minMagnitude = 'all')
library(jsonlite)
data <- getSeismicData(timeFrame = 'PAST_WEEK', minMagnitude = 'all')
data$features$properties %>% transmute(magnitude=mag,day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.numeric)
data$features$properties %>% transmute(magnitude=mag,day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.numeric) %>% group_by(day)
?cut
cut(data$features$properties$mag,breaks=10)
cut(data$features$properties$mag,breaks=c(0:10))
cut(data$features$properties$mag,breaks=c(0:11))
data$features$properties$mag
?cut
?mean
cut(data$features$properties$mag,breaks=c(0:11), na.rm=TRUE)
max(data$features$properties$mag)
max(data$features$properties$mag,na.rm = TRUE)
ceiling(max(data$features$properties$mag,na.rm = TRUE))
cut(data$features$properties$mag,breaks=c(0:ceiling(max(data$features$properties$mag,na.rm = TRUE))), na.rm=TRUE)
data$features$properties %>% transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.numeric) %>% group_by(day)
data$features$properties %>% transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.numeric) %>% group_by(day,magnitude)
data$features$properties %>% transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.numeric) %>% group_by(day,magnitude) %>% summarise(count=n(),)
data$features$properties %>% transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.numeric) %>% group_by(day,magnitude) %>% summarise(count=n())
round(as.POSIXct(data$features$properties$time/1000, origin="1970-01-01"),units='days')  %>% as.character
data$features$properties %>% transmute(magnitude=mag,day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character %>% group_by(day)
)
data$features$properties %>% transmute(magnitude=mag,day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day)
data$features$properties %>% transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day,magnitude) %>% summarise(count=n())
install.packages('nycflights13') # Install if necessary
library(nycflights13) # Install if necessary
str(flights) # It's a tbl_df which means that it's a special kind of dplyr data frame
?arrange
pew = read_csv('https://raw.githubusercontent.com/hadley/tidyr/master/vignettes/pew.csv')
library(readr)
library(tidyr)
pew = read_csv('https://raw.githubusercontent.com/hadley/tidyr/master/vignettes/pew.csv')
# Look - read_csv. Automatically kept strings and read the column names correctly!
# Use spec(pew) to see exactly how it read everything in
glimpse(pew)
pew
pew2 = pew %>% gather(key = income,
value = frequency,
`<$10k`:`Don't know/refused`)
pew2
data$features$properties %>% transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day,magnitude) %>% summarise(count=n())
tb = read_csv("https://raw.githubusercontent.com/hadley/tidyr/master/vignettes/tb.csv")
tb2 = tb %>% gather(key = demographic,
value = cases,
-iso2, -year,
na.rm = TRUE)
tb
tb2
tb3 = tb2 %>% separate(col = demographic, # Original column
into = c("sex", "age"), # New columns to separate into
sep = 1) # sep value.
tb3
weather = read_csv("https://raw.githubusercontent.com/hadley/tidyr/master/vignettes/weather.csv")
glimpse(weather)
weather2 = weather %>% gather(key = day, # Create new variable day
value = value, # Create new variable called value
d1:d31, # Columns to gather up
na.rm = TRUE) # Remove all those horrible NAs
weather2
weather3 = weather2 %>%
mutate(day = parse_number(day)) %>% # Get rid of the 'd' in e.g. 'd3'
select(id, year, month, day, element, value) %>% # Order the columns
arrange(id, year, month, day) # Sort properly
weather3
weather4 = weather3 %>%
spread(key = element,
value = value) # Spread across element
weather4
?gather
weather3
weather4
data$features$properties %>% transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day,magnitude) %>% summarise(count=n())
weather3
weather4
weather3
data$features$properties %>% transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day,magnitude) %>% summarise(count=n())
data$features$properties %>% transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day,magnitude) %>% summarise(count=n()) %>% spread(key=magnitude, value=count)
data$features$properties
%>% transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day,magnitude)
%>% summarise(count=n())
%>% spread(key=magnitude, value=count)
data$features$properties %>% transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day,magnitude) %>% summarise(count=n()) %>% spread(key=magnitude, value=count)
df <- data$features$properties %>% transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day,magnitude) %>% summarise(count=n()) %>% spread(key=magnitude, value=count)
?rowSums
?rowNames
?colNames
??colNames
rownames(df) <- df$day
df
df %>% mutate(avg=rowSums(.[-day]))
?rowSums
df %>% mutate(avg=rowSums(.[-c(day)], na.rm=TRUE))
df %>% mutate(avg=rowSums(.[-c(day)], na.rm=TRUE))
df[-c(day)]
df[-c(day),]
df[,-1]
rowSums(df[,-1], na.rm=TRUE))
rowSums(df[,-1], na.rm=TRUE)
df$total <- rowSums(df[,-1], na.rm=TRUE)
df$total
df
?apply
data$features$properties
df
?apply
df$avg <- apply(df[,-1],1, 'mean',na.rm = TRUE)
df
df$avg <- round(apply(df[,-1],1, 'mean',na.rm = TRUE),0)
df
data <- getSeismicData(timeFrame = 'PAST_MONTH', minMagnitude = 'all')
data$metadata$count
df <- data$features$properties %>% transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day,magnitude) %>% summarise(count=n()) %>% spread(key=magnitude, value=count)
df
df$total <- round(apply(df[,-1],1, 'sum',na.rm = TRUE),0)
df$avg <- round(apply(df[,-1],1, 'mean',na.rm = TRUE),0)
df
df[is.na(df)] <- 0
df
source('~/Documents/git/STAT40830/w6/getSeismicData.R')
data <- getSeismicData(timeFrame = 'PAST_DAY', minMagnitude = '2.5')
data
library(dplyr)
data <- getSeismicData(timeFrame = 'PAST_WEEK', minMagnitude = 'all')
str(data$metadata)  %>% select(cnt = metadata$count)
data <- getSeismicData(timeFrame = 'PAST_MONTH', minMagnitude = 'all')
df <- data$features$properties %>%
transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day,magnitude) %>% summarise(count=n()) %>% spread(key=magnitude, value=count)
data <- getSeismicData(timeFrame = 'PAST_MONTH', minMagnitude = 'all')
summary <- list()
summary$description <- data$metadata$title
summary$frequency <- data$metadata$count
data$features$properties %>% transmute(magnitude=mag,day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day)
fromJSON('https://gist.githubusercontent.com/keeguon/2310008/raw/bdc2ce1c1e3f28f9cab5b4393c7549f38361be4e/countries.json')
fromJSON('https://restcountries.eu/rest/v1/all')
countries <- fromJSON('https://restcountries.eu/rest/v1/all')
countries$name
data$features$properties$place
data$features$properties
data$features$properties %>% head
data$features$properties$place %>% head
?split
data$features$properties$place %>% head %>% strsplit(split=',')
data$features$properties$place %>% head %>% strsplit(split=',') %>% strtrim
?strtrim
data$features$properties$place %>% head %>% strsplit(split=',')
data$features$properties$place %>% strsplit(split=',')
data$features$properties$title
data$features$properties$place
data$features$properties %>% strsplit(split=',')
data$features$properties$place %>% strsplit(split=',')
data$features$properties$place %>% strsplit(split=',') %>% .[2]
data$features$properties$place %>% strsplit(split=',') %>% .[1]
data$features$properties$place %>% strsplit(split=',') %>% .[5]
data$features$properties$place %>% strsplit(split=',') %>% .[[2]]
data$features$properties$place %>% strsplit(split=',') %>% .[[]][2]
data$features$properties$place %>% strsplit(split=',') %>% str
data$features$properties$place %>% strsplit(split=',') %>% unlist
?unlist
data$features$properties$place %>% strsplit(split=',') %>% as.data.frame
data$features$properties$place %>% strsplit(split=',') %>% head
data$features$properties$place %>% strsplit(split=',') %>% [[1]]
data$features$properties$place %>% strsplit(split=',') %>% .[[1]]
data$features$properties$place %>% strsplit(split=',') %>% .[[1]][2]
data$features$properties$place %>% strsplit(split=',') %>% .[[1]][1]
data$features$properties$place %>% strsplit(split=',') %>% .[[1][1]]
data$features$properties$place %>% strsplit(split=',') %>% .[[1]]([1])
data$features$properties$place %>% strsplit(split=',') %>% sapply(., FUN=function(x){x1})
ata$features$properties$place %>% strsplit(split=',') %>% sapply(., FUN=function(x){x[1]})
data$features$properties$place %>% strsplit(split=',')
data$features$properties$place %>% strsplit(split=',') %>% sapply(., FUN = function(x){x[1]})
data$features$properties$place %>% strsplit(split=',') %>% sapply(., FUN = function(x){x[2]})
data$features$properties$place %>% strsplit(split=',') %>% sapply(., FUN = function(x){sub("^\\s+", "", x[2])})
df <- data$features$properties %>%
transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day,magnitude) %>% summarise(count=n()) %>% spread(key=magnitude, value=count)
library(tidyr)
df <- data$features$properties %>%
transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day,magnitude) %>% summarise(count=n()) %>% spread(key=magnitude, value=count)
df
df$total <- round(apply(df[,-1],1, 'sum',na.rm = TRUE),0)
df$avg <- round(apply(df[,-1],1, 'mean',na.rm = TRUE),0)
df[is.na(df)] <- 0
summary
data$features$properties$place %>% strsplit(split=',') %>% sapply(., FUN = function(x){sub("^\\s+", "", x[2])})
states <- ('https://gist.githubusercontent.com/mshafrir/2646763/raw/8b0dbb93521f5d6889502305335104218454c2bf/states_hash.json')
states
states <- fromJSON('https://gist.githubusercontent.com/mshafrir/2646763/raw/8b0dbb93521f5d6889502305335104218454c2bf/states_hash.json')
states
states <- unlist(fromJSON('https://gist.githubusercontent.com/mshafrir/2646763/raw/8b0dbb93521f5d6889502305335104218454c2bf/states_hash.json'))
states
states %>% contains("alaska", ignore.case = TRUE)
states %>% contains("alaska", ignore.case = TRUE)
states
states %>% contains("alaska", ignore.case = TRUE)
states
states %>% str
?unname
states <- unname(unlist(fromJSON('https://gist.githubusercontent.com/mshafrir/2646763/raw/8b0dbb93521f5d6889502305335104218454c2bf/states_hash.json')))
states
states %>% contains("alaska", ignore.case = TRUE)
states %>% as.data.frame
states %>% as.data.frame %>% contains("alaska", ignore.case = TRUE)
?contains
?contains
states
states %>% as.data.frame %>% select(.,contains("alaska", ignore.case = TRUE))
'alaska' %in% states
states
'Alaska' %in% states
states <- tolower(unname(unlist(fromJSON('https://gist.githubusercontent.com/mshafrir/2646763/raw/8b0dbb93521f5d6889502305335104218454c2bf/states_hash.json'))))
states
'alaska' %in% states
data$features$properties$place %>% strsplit(split=',') %>% sapply(., FUN = function(x){sub("^\\s+", "", x[2])})
data$features$properties$place %>% strsplit(split=',') %>% sapply(., FUN = function(x){sub("^\\s+", "", x[2])}) %>% (function(x){ ifelse(tolower(x) %in% states,'USA',x) })
data$features$properties %>% transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),country=place %>% strsplit(split=',') %>% sapply(., FUN = function(x){sub("^\\s+", "", x[2])}) %>% (function(x){ ifelse(tolower(x) %in% states,'USA',x) }))
data$features$properties %>% transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),country=place %>% strsplit(split=',') %>% sapply(., FUN = function(x){sub("^\\s+", "", x[2])}) %>% (function(x){ ifelse(tolower(x) %in% states,'USA',x) })) %>% group_by(country,magnitude) %>% summarise(count=n()) %>% spread(key=magnitude, value=count)
?spread
data$features$properties %>% transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),country=place %>% strsplit(split=',') %>% sapply(., FUN = function(x){sub("^\\s+", "", x[2])}) %>% (function(x){ ifelse(tolower(x) %in% states,'USA',x) })) %>% group_by(country,magnitude) %>% summarise(count=n()) %>% spread(key=magnitude, value=count, fill = 0)
states <- tolower(unname(unlist(fromJSON('https://gist.githubusercontent.com/mshafrir/2646763/raw/8b0dbb93521f5d6889502305335104218454c2bf/states_hash.json'))))
countries <- fromJSON('https://restcountries.eu/rest/v1/all')
getSummaryStats <- function(timeFrame = c('PAST_HOUR','PAST_DAY','PAST_WEEK','PAST_MONTH'),
minMagnitude = c('all','1.0','2.5','4.5')){
#get time frame argument value
timeFrame.arg = match.arg(timeFrame)
#get minimum magnitude argument value
minMagnitude.arg = match.arg(minMagnitude)
#
timeFrame.arg.normalized = timeFrame.arg %>% gsub(pattern='PAST_',replacement='',x=.) %>% tolower
data <- getSeismicData(timeFrame = timeFrame.arg.normalized, minMagnitude = minMagnitude.arg)
summary <- list()
summary$description <- data$metadata$title
summary$frequency <- data$metadata$count
#data$features$properties %>% transmute(magnitude=mag,day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day)
df.magnitudeByDay <- data$features$properties %>%
transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day,magnitude) %>% summarise(count=n()) %>% spread(key=magnitude, value=count)
df.magnitudeByCountry <- data$features$properties %>%
transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),country=place %>% strsplit(split=',') %>% sapply(., FUN = function(x){sub("^\\s+", "", x[2])}) %>% (function(x){ ifelse(tolower(x) %in% states,'USA',x) })) %>% group_by(country,magnitude) %>% summarise(count=n()) %>% spread(key=magnitude, value=count, fill = 0)
df.magnitudeByDay$total <- round(apply(df[,-1],1, 'sum',na.rm = TRUE),0)
df.magnitudeByDay$avg <- round(apply(df[,-1],1, 'mean',na.rm = TRUE),0)
summary$magnitudeByDay <- df.magnitudeByDay
summary$magnitudeByCountry <- df.magnitudeByCountry
return(summary)
}
getSummaryStats('PAST_DAY','all')
getSummaryStats(timeFrame = 'PAST_DAY', minMagnitude =
getSummaryStats(timeFrame = 'PAST_DAY', minMagnitude = 'all')
getSummaryStats(timeFrame = 'PAST_DAY', minMagnitude = 'all')
getSummaryStats(timeFrame = 'PAST_DAY', minMagnitude = 'all')
resp <- getSummaryStats(timeFrame = 'PAST_DAY', minMagnitude = 'all')
resp <- getSummaryStats(timeFrame = 'PAST_DAY', minMagnitude = 'all')
getSummaryStats <- function(timeFrame = c('PAST_HOUR','PAST_DAY','PAST_WEEK','PAST_MONTH'),
minMagnitude = c('all','1.0','2.5','4.5')){
#get time frame argument value
timeFrame.arg = match.arg(timeFrame)
#get minimum magnitude argument value
minMagnitude.arg = match.arg(minMagnitude)
#
timeFrame.arg.normalized = timeFrame.arg %>% gsub(pattern='PAST_',replacement='',x=.) %>% tolower
data <- getSeismicData(timeFrame = timeFrame.arg.normalized, minMagnitude = minMagnitude.arg)
summary <- list()
summary$description <- data$metadata$title
summary$frequency <- data$metadata$count
#data$features$properties %>% transmute(magnitude=mag,day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day)
df.magnitudeByDay <- data$features$properties %>%
transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day,magnitude) %>% summarise(count=n()) %>% spread(key=magnitude, value=count)
df.magnitudeByCountry <- data$features$properties %>%
transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),country=place %>% strsplit(split=',') %>% sapply(., FUN = function(x){sub("^\\s+", "", x[2])}) %>% (function(x){ ifelse(tolower(x) %in% states,'USA',x) })) %>% group_by(country,magnitude) %>% summarise(count=n()) %>% spread(key=magnitude, value=count, fill = 0)
df.magnitudeByDay$total <- round(apply(df[,-1],1, 'sum',na.rm = TRUE),0)
df.magnitudeByDay$avg <- round(apply(df[,-1],1, 'mean',na.rm = TRUE),0)
summary$magnitudeByDay <- df.magnitudeByDay
summary$magnitudeByCountry <- df.magnitudeByCountry
return(summary)
}
resp <- getSummaryStats(timeFrame = 'PAST_DAY', minMagnitude = 'all')
getSummaryStats <- function(timeFrame = c('PAST_HOUR','PAST_DAY','PAST_WEEK','PAST_MONTH'),
minMagnitude = c('all','1.0','2.5','4.5')){
#get time frame argument value
timeFrame.arg = match.arg(timeFrame)
#get minimum magnitude argument value
minMagnitude.arg = match.arg(minMagnitude)
data <- getSeismicData(timeFrame = timeFrame.arg, minMagnitude = minMagnitude.arg)
summary <- list()
summary$description <- data$metadata$title
summary$frequency <- data$metadata$count
#data$features$properties %>% transmute(magnitude=mag,day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day)
df.magnitudeByDay <- data$features$properties %>%
transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day,magnitude) %>% summarise(count=n()) %>% spread(key=magnitude, value=count)
df.magnitudeByCountry <- data$features$properties %>%
transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),country=place %>% strsplit(split=',') %>% sapply(., FUN = function(x){sub("^\\s+", "", x[2])}) %>% (function(x){ ifelse(tolower(x) %in% states,'USA',x) })) %>% group_by(country,magnitude) %>% summarise(count=n()) %>% spread(key=magnitude, value=count, fill = 0)
df.magnitudeByDay$total <- round(apply(df[,-1],1, 'sum',na.rm = TRUE),0)
df.magnitudeByDay$avg <- round(apply(df[,-1],1, 'mean',na.rm = TRUE),0)
summary$magnitudeByDay <- df.magnitudeByDay
summary$magnitudeByCountry <- df.magnitudeByCountry
return(summary)
}
resp <- getSummaryStats(timeFrame = 'PAST_DAY', minMagnitude = 'all')
resp <- getSummaryStats(timeFrame = 'PAST_DAY', minMagnitude = 'all')
resp <- getSummaryStats(timeFrame = 'PAST_DAY', minMagnitude = 'all')
getSummaryStats <- function(timeFrame = c('PAST_HOUR','PAST_DAY','PAST_WEEK','PAST_MONTH'),
minMagnitude = c('all','1.0','2.5','4.5')){
#get time frame argument value
timeFrame.arg = match.arg(timeFrame)
#get minimum magnitude argument value
minMagnitude.arg = match.arg(minMagnitude)
data <- getSeismicData(timeFrame = timeFrame.arg, minMagnitude = minMagnitude.arg)
summary <- list()
summary$description <- data$metadata$title
summary$frequency <- data$metadata$count
#data$features$properties %>% transmute(magnitude=mag,day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day)
df.magnitudeByDay = data$features$properties %>%
transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day,magnitude) %>% summarise(count=n()) %>% spread(key=magnitude, value=count)
df.magnitudeByCountry = data$features$properties %>%
transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),country=place %>% strsplit(split=',') %>% sapply(., FUN = function(x){sub("^\\s+", "", x[2])}) %>% (function(x){ ifelse(tolower(x) %in% states,'USA',x) })) %>% group_by(country,magnitude) %>% summarise(count=n()) %>% spread(key=magnitude, value=count, fill = 0)
df.magnitudeByDay$total <- round(apply(df[,-1],1, 'sum',na.rm = TRUE),0)
df.magnitudeByDay$avg <- round(apply(df[,-1],1, 'mean',na.rm = TRUE),0)
summary$magnitudeByDay <- df.magnitudeByDay
summary$magnitudeByCountry <- df.magnitudeByCountry
return(summary)
}
resp <- getSummaryStats(timeFrame = 'PAST_DAY', minMagnitude = 'all')
getSummaryStats <- function(timeFrame = c('PAST_HOUR','PAST_DAY','PAST_WEEK','PAST_MONTH'),
minMagnitude = c('all','1.0','2.5','4.5')){
#get time frame argument value
timeFrame.arg = match.arg(timeFrame)
#get minimum magnitude argument value
minMagnitude.arg = match.arg(minMagnitude)
data <- getSeismicData(timeFrame = timeFrame.arg, minMagnitude = minMagnitude.arg)
summary <- list()
summary$description <- data$metadata$title
summary$frequency <- data$metadata$count
#data$features$properties %>% transmute(magnitude=mag,day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day)
#df.magnitudeByDay = data$features$properties %>%
# transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day,magnitude) %>% summarise(count=n()) %>% spread(key=magnitude, value=count)
#df.magnitudeByCountry = data$features$properties %>%
transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),country=place %>% strsplit(split=',') %>% sapply(., FUN = function(x){sub("^\\s+", "", x[2])}) %>% (function(x){ ifelse(tolower(x) %in% states,'USA',x) })) %>% group_by(country,magnitude) %>% summarise(count=n()) %>% spread(key=magnitude, value=count, fill = 0)
#df.magnitudeByDay$total <- round(apply(df[,-1],1, 'sum',na.rm = TRUE),0)
#df.magnitudeByDay$avg <- round(apply(df[,-1],1, 'mean',na.rm = TRUE),0)
#summary$magnitudeByDay <- df.magnitudeByDay
#summary$magnitudeByCountry <- df.magnitudeByCountry
return(summary)
}
resp <- getSummaryStats(timeFrame = 'PAST_DAY', minMagnitude = 'all')
getSummaryStats <- function(timeFrame = c('PAST_HOUR','PAST_DAY','PAST_WEEK','PAST_MONTH'),
minMagnitude = c('all','1.0','2.5','4.5')){
#get time frame argument value
timeFrame.arg = match.arg(timeFrame)
#get minimum magnitude argument value
minMagnitude.arg = match.arg(minMagnitude)
data <- getSeismicData(timeFrame = timeFrame.arg, minMagnitude = minMagnitude.arg)
summary <- list()
summary$description <- data$metadata$title
summary$frequency <- data$metadata$count
#data$features$properties %>% transmute(magnitude=mag,day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day)
#df.magnitudeByDay = data$features$properties %>%
# transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day,magnitude) %>% summarise(count=n()) %>% spread(key=magnitude, value=count)
#df.magnitudeByCountry = data$features$properties %>%
#    transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),country=place %>% strsplit(split=',') %>% sapply(., FUN = function(x){sub("^\\s+", "", x[2])}) %>% (function(x){ ifelse(tolower(x) %in% states,'USA',x) })) %>% group_by(country,magnitude) %>% summarise(count=n()) %>% spread(key=magnitude, value=count, fill = 0)
#df.magnitudeByDay$total <- round(apply(df[,-1],1, 'sum',na.rm = TRUE),0)
#df.magnitudeByDay$avg <- round(apply(df[,-1],1, 'mean',na.rm = TRUE),0)
#summary$magnitudeByDay <- df.magnitudeByDay
#summary$magnitudeByCountry <- df.magnitudeByCountry
return(summary)
}
resp <- getSummaryStats(timeFrame = 'PAST_DAY', minMagnitude = 'all')
resp
getSummaryStats <- function(timeFrame = c('PAST_HOUR','PAST_DAY','PAST_WEEK','PAST_MONTH'),
minMagnitude = c('all','1.0','2.5','4.5')){
#get time frame argument value
timeFrame.arg = match.arg(timeFrame)
#get minimum magnitude argument value
minMagnitude.arg = match.arg(minMagnitude)
data <- getSeismicData(timeFrame = timeFrame.arg, minMagnitude = minMagnitude.arg)
summary <- list()
summary$description <- data$metadata$title
summary$frequency <- data$metadata$count
#data$features$properties %>% transmute(magnitude=mag,day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day)
df.magnitudeByDay = data$features$properties %>%
transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day,magnitude) %>% summarise(count=n()) %>% spread(key=magnitude, value=count)
#df.magnitudeByCountry = data$features$properties %>%
#    transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),country=place %>% strsplit(split=',') %>% sapply(., FUN = function(x){sub("^\\s+", "", x[2])}) %>% (function(x){ ifelse(tolower(x) %in% states,'USA',x) })) %>% group_by(country,magnitude) %>% summarise(count=n()) %>% spread(key=magnitude, value=count, fill = 0)
#df.magnitudeByDay$total <- round(apply(df[,-1],1, 'sum',na.rm = TRUE),0)
#df.magnitudeByDay$avg <- round(apply(df[,-1],1, 'mean',na.rm = TRUE),0)
summary$magnitudeByDay <- df.magnitudeByDay
#summary$magnitudeByCountry <- df.magnitudeByCountry
return(summary)
}
resp <- getSummaryStats(timeFrame = 'PAST_DAY', minMagnitude = 'all')
resp
getSummaryStats <- function(timeFrame = c('PAST_HOUR','PAST_DAY','PAST_WEEK','PAST_MONTH'),
minMagnitude = c('all','1.0','2.5','4.5')){
#get time frame argument value
timeFrame.arg = match.arg(timeFrame)
#get minimum magnitude argument value
minMagnitude.arg = match.arg(minMagnitude)
data <- getSeismicData(timeFrame = timeFrame.arg, minMagnitude = minMagnitude.arg)
summary <- list()
summary$description <- data$metadata$title
summary$num_seismic_events <- data$metadata$count
#data$features$properties %>% transmute(magnitude=mag,day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day)
df.magnitudeByDay = data$features$properties %>%
transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day,magnitude) %>% summarise(count=n()) %>% spread(key=magnitude, value=count)
#df.magnitudeByCountry = data$features$properties %>%
#    transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),country=place %>% strsplit(split=',') %>% sapply(., FUN = function(x){sub("^\\s+", "", x[2])}) %>% (function(x){ ifelse(tolower(x) %in% states,'USA',x) })) %>% group_by(country,magnitude) %>% summarise(count=n()) %>% spread(key=magnitude, value=count, fill = 0)
#df.magnitudeByDay$total <- round(apply(df[,-1],1, 'sum',na.rm = TRUE),0)
#df.magnitudeByDay$avg <- round(apply(df[,-1],1, 'mean',na.rm = TRUE),0)
summary$magnitudeByDay <- df.magnitudeByDay
#summary$magnitudeByCountry <- df.magnitudeByCountry
return(summary)
}
resp <- getSummaryStats(timeFrame = 'PAST_WEEK', minMagnitude = 'all')
resp
getSummaryStats <- function(timeFrame = c('PAST_HOUR','PAST_DAY','PAST_WEEK','PAST_MONTH'),
minMagnitude = c('all','1.0','2.5','4.5')){
#get time frame argument value
timeFrame.arg = match.arg(timeFrame)
#get minimum magnitude argument value
minMagnitude.arg = match.arg(minMagnitude)
data <- getSeismicData(timeFrame = timeFrame.arg, minMagnitude = minMagnitude.arg)
summary <- list()
summary$description <- data$metadata$title
summary$num_seismic_events <- data$metadata$count
#data$features$properties %>% transmute(magnitude=mag,day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day)
df.magnitudeByDay = data$features$properties %>%
transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day,magnitude) %>% summarise(count=n()) %>% spread(key=magnitude, value=count, fill=0)
#df.magnitudeByCountry = data$features$properties %>%
#    transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),country=place %>% strsplit(split=',') %>% sapply(., FUN = function(x){sub("^\\s+", "", x[2])}) %>% (function(x){ ifelse(tolower(x) %in% states,'USA',x) })) %>% group_by(country,magnitude) %>% summarise(count=n()) %>% spread(key=magnitude, value=count, fill = 0)
#df.magnitudeByDay$total <- round(apply(df[,-1],1, 'sum',na.rm = TRUE),0)
#df.magnitudeByDay$avg <- round(apply(df[,-1],1, 'mean',na.rm = TRUE),0)
summary$magnitudeByDay <- df.magnitudeByDay
#summary$magnitudeByCountry <- df.magnitudeByCountry
return(summary)
}
resp <- getSummaryStats(timeFrame = 'PAST_WEEK', minMagnitude = 'all')
resp
getSummaryStats <- function(timeFrame = c('PAST_HOUR','PAST_DAY','PAST_WEEK','PAST_MONTH'),
minMagnitude = c('all','1.0','2.5','4.5')){
#get time frame argument value
timeFrame.arg = match.arg(timeFrame)
#get minimum magnitude argument value
minMagnitude.arg = match.arg(minMagnitude)
data <- getSeismicData(timeFrame = timeFrame.arg, minMagnitude = minMagnitude.arg)
summary <- list()
summary$description <- data$metadata$title
summary$num_seismic_events <- data$metadata$count
#data$features$properties %>% transmute(magnitude=mag,day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day)
df.magnitudeByDay = data$features$properties %>%
transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day,magnitude) %>% summarise(count=n()) %>% spread(key=magnitude, value=count, fill=0)
df.magnitudeByCountry = data$features$properties %>%
transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),country=place %>% strsplit(split=',') %>% sapply(., FUN = function(x){sub("^\\s+", "", x[2])}) %>% (function(x){ ifelse(tolower(x) %in% states,'USA',x) })) %>% group_by(country,magnitude) %>% summarise(count=n()) %>% spread(key=magnitude, value=count, fill = 0)
#df.magnitudeByDay$total <- round(apply(df[,-1],1, 'sum',na.rm = TRUE),0)
#df.magnitudeByDay$avg <- round(apply(df[,-1],1, 'mean',na.rm = TRUE),0)
summary$magnitudeByDay <- df.magnitudeByDay
summary$magnitudeByCountry <- df.magnitudeByCountry
return(summary)
}
resp <- getSummaryStats(timeFrame = 'PAST_WEEK', minMagnitude = 'all')
resp
