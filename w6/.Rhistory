my_map$tileLayer('Esri.WorldStreetMap')
my_map$setView(c(0, 0), zoom = 2)
for(i in 1:nrow(data$features)) {
longtitude <-  data$features[i,]$geometry$coordinates[[1]][1]
latitude <-  data$features[i,]$geometry$coordinates[[1]][2]
depth <-  data$features[i,]$geometry$coordinates[[1]][3]
# my_map$addCircleMarkers(data=cities.meta, radius = ~sqrt(10*PopClass),
#                  color = ~palfun(PopClass), stroke=FALSE, fillOpacity=0.5, layerId = ~Location)
# my_map$addCircleMarkers(data=c(latitude,longtitude), radius=data$features[i,]$properties$mag)
my_map$marker(c(latitude, longtitude),
bindPopup = paste(
"<ul>",
"<li>Place:",data$features[i,]$properties$place,"</li>",
"<li>Magnitude:",data$features[i,]$properties$mag,"</li>",
"<li>Time:",as.POSIXct(data$features[i,]$properties$time/1000, origin="1970-01-01"),"</li>",
"<li>Depth:",depth,"</li>",
"<li><a href=",data$features[i,]$properties$url,">More Details...</></li>",
"</ul>"))
}
my_map
my_map = Leaflet$new()
my_map$tileLayer(provider='Esri.WorldStreetMap')
my_map$setView(c(0, 0), zoom = 2)
for(i in 1:nrow(data$features)) {
longtitude <-  data$features[i,]$geometry$coordinates[[1]][1]
latitude <-  data$features[i,]$geometry$coordinates[[1]][2]
depth <-  data$features[i,]$geometry$coordinates[[1]][3]
# my_map$addCircleMarkers(data=cities.meta, radius = ~sqrt(10*PopClass),
#                  color = ~palfun(PopClass), stroke=FALSE, fillOpacity=0.5, layerId = ~Location)
# my_map$addCircleMarkers(data=c(latitude,longtitude), radius=data$features[i,]$properties$mag)
my_map$marker(c(latitude, longtitude),
bindPopup = paste(
"<ul>",
"<li>Place:",data$features[i,]$properties$place,"</li>",
"<li>Magnitude:",data$features[i,]$properties$mag,"</li>",
"<li>Time:",as.POSIXct(data$features[i,]$properties$time/1000, origin="1970-01-01"),"</li>",
"<li>Depth:",depth,"</li>",
"<li><a href=",data$features[i,]$properties$url,">More Details...</></li>",
"</ul>"))
}
my_map
my_map = Leaflet$new()
my_map$tileLayer(provider='Esri.WorldStreetMap')
my_map$setView(c(0, 0), zoom = 2)
for(i in 1:nrow(data$features)) {
longtitude <-  data$features[i,]$geometry$coordinates[[1]][1]
latitude <-  data$features[i,]$geometry$coordinates[[1]][2]
depth <-  data$features[i,]$geometry$coordinates[[1]][3]
# my_map$addCircleMarkers(data=cities.meta, radius = ~sqrt(10*PopClass),
#                  color = ~palfun(PopClass), stroke=FALSE, fillOpacity=0.5, layerId = ~Location)
# my_map$addCircleMarkers(data=c(latitude,longtitude), radius=data$features[i,]$properties$mag)
my_map$circle(c(latitude, longtitude), radius = data$features[i,]$properties$mag,
bindPopup = paste(
"<ul>",
"<li>Place:",data$features[i,]$properties$place,"</li>",
"<li>Magnitude:",data$features[i,]$properties$mag,"</li>",
"<li>Time:",as.POSIXct(data$features[i,]$properties$time/1000, origin="1970-01-01"),"</li>",
"<li>Depth:",depth,"</li>",
"<li><a href=",data$features[i,]$properties$url,">More Details...</></li>",
"</ul>"))
}
my_map
my_map = Leaflet$new()
my_map$tileLayer(provider='Esri.WorldStreetMap')
my_map$setView(c(0, 0), zoom = 2)
for(i in 1:nrow(data$features)) {
longtitude <-  data$features[i,]$geometry$coordinates[[1]][1]
latitude <-  data$features[i,]$geometry$coordinates[[1]][2]
depth <-  data$features[i,]$geometry$coordinates[[1]][3]
# my_map$addCircleMarkers(data=cities.meta, radius = ~sqrt(10*PopClass),
#                  color = ~palfun(PopClass), stroke=FALSE, fillOpacity=0.5, layerId = ~Location)
# my_map$addCircleMarkers(data=c(latitude,longtitude), radius=data$features[i,]$properties$mag)
my_map$circle(c(latitude, longtitude), radius = data$features[i,]$properties$mag*1000,
bindPopup = paste(
"<ul>",
"<li>Place:",data$features[i,]$properties$place,"</li>",
"<li>Magnitude:",data$features[i,]$properties$mag,"</li>",
"<li>Time:",as.POSIXct(data$features[i,]$properties$time/1000, origin="1970-01-01"),"</li>",
"<li>Depth:",depth,"</li>",
"<li><a href=",data$features[i,]$properties$url,">More Details...</></li>",
"</ul>"))
}
my_map
map2 = Leaflet$new()
map2$setView(c(45.5236, -122.6750), 13)
# map2$tileLayer(provider = 'Stamen.Toner')
map2$tileLayer(provider = 'Stamen.Watercolor')
map2$marker(c(45.5244, -122.6699), bindPopup = 'The Waterfront')
map2$circle(c(45.5215, -122.6261), radius = 500, bindPopup = 'Laurelhurst Park')
map2
??circle
map2 = Leaflet$new()
map2$setView(c(45.5236, -122.6750), 13)
# map2$tileLayer(provider = 'Stamen.Toner')
map2$tileLayer(provider = 'Stamen.Watercolor')
map2$marker(c(45.5244, -122.6699), bindPopup = 'The Waterfront')
# map2$??circle(c(45.5215, -122.6261), radius = 500, bindPopup = 'Laurelhurst Park')
map2$circleMarker(c(45.5215, -122.6261), radius = 500, bindPopup = 'Laurelhurst Park')
map2
# devtools::install_github('rCharts', 'bbest') # tweak to make var geojsonLayer available
require(rCharts)
json = '{"type":"FeatureCollection","features":[
{"type":"Feature",
"properties":{"region_id":1, "region_name":"Australian Alps"},
"geometry":{"type":"Polygon","coordinates":[[[141.13037109375,-38.788345355085625],[141.13037109375,-36.65079252503469],[144.38232421875,-36.65079252503469],[144.38232421875,-38.788345355085625],[141.13037109375,-38.788345355085625]]]}},
{"type":"Feature",
"properties":{"region_id":4, "region_name":"Shark Bay"},
"geometry":{"type":"Polygon","coordinates":[[[143.10791015625,-37.75334401310656],[143.10791015625,-34.95799531086791],[146.25,-34.95799531086791],[146.25,-37.75334401310656],[143.10791015625,-37.75334401310656]]]}}
]}'
regions=RJSONIO::fromJSON(json)
lmap <- Leaflet$new()
lmap$tileLayer(provide='Stamen.TonerLite')
lmap$setView(c(-37, 145), zoom = 6)
lmap$geoJson(
regions,
style = "#! function(feature) {
var rgn2col = {1:'red',2:'blue',4:'green'};
return {
color: rgn2col[feature.properties['region_id']],
strokeWidth: '1px',
strokeOpacity: 0.5,
fillOpacity: 0.2
}; } !#",
onEachFeature = "#! function (feature, layer) {
// info rollover
if (document.getElementsByClassName('info leaflet-control').length == 0 ){
info = L.control({position: 'topright'});  // NOTE: made global b/c not ideal place to put this function
info.onAdd = function (map) {
this._div = L.DomUtil.create('div', 'info');
this.update();
return this._div;
};
info.update = function (props) {
this._div.innerHTML = '<h4>Field Name</h4>' +  (props ?
props['region_id'] + ': <b> + props[fld] + </b>'
: 'Hover over a region');
};
info.addTo(map);
};
// mouse events
layer.on({
// mouseover to highlightFeature
mouseover: function (e) {
var layer = e.target;
layer.setStyle({
strokeWidth: '3px',
strokeOpacity: 0.7,
fillOpacity: 0.5
});
if (!L.Browser.ie && !L.Browser.opera) {
layer.bringToFront();
}
info.update(layer.feature.properties);
},
// mouseout to resetHighlight
mouseout: function (e) {
geojsonLayer.resetStyle(e.target);
info.update();
},
// click to zoom
click: function (e) {
var layer = e.target;
if ( feature.geometry.type === 'MultiPolygon' ) {
// for multipolygons get true extent
var bounds = layer.getBounds(); // get the bounds for the first polygon that makes up the multipolygon
// loop through coordinates array, skip first element as the bounds var represents the bounds for that element
for ( var i = 1, il = feature.geometry.coordinates[0].length; i < il; i++ ) {
var ring = feature.geometry.coordinates[0][i];
var latLngs = ring.map(function(pair) {
return new L.LatLng(pair[1], pair[0]);
});
var nextBounds = new L.LatLngBounds(latLngs);
bounds.extend(nextBounds);
}
map.fitBounds(bounds);
} else {
// otherwise use native target bounds
map.fitBounds(e.target.getBounds());
}
}
});
} !#")
legend_vec = c('red'='high', 'blue'='medium', 'green'='low')
lmap$legend(position = 'bottomright',
colors   =  names(legend_vec),
labels   =  as.vector(legend_vec))
lmap
my_map = Leaflet$new()
my_map$tileLayer(provider='Esri.WorldStreetMap')
my_map$setView(c(0, 0), zoom = 2)
for(i in 1:nrow(data$features)) {
longtitude <-  data$features[i,]$geometry$coordinates[[1]][1]
latitude <-  data$features[i,]$geometry$coordinates[[1]][2]
depth <-  data$features[i,]$geometry$coordinates[[1]][3]
# my_map$addCircleMarkers(data=cities.meta, radius = ~sqrt(10*PopClass),
#                  color = ~palfun(PopClass), stroke=FALSE, fillOpacity=0.5, layerId = ~Location)
# my_map$addCircleMarkers(data=c(latitude,longtitude), radius=data$features[i,]$properties$mag)
my_map$circle(c(latitude, longtitude), radius = data$features[i,]$properties$mag*1000,
bindPopup = paste(
"<ul>",
"<li>Place:",data$features[i,]$properties$place,"</li>",
"<li>Magnitude:",data$features[i,]$properties$mag,"</li>",
"<li>Time:",as.POSIXct(data$features[i,]$properties$time/1000, origin="1970-01-01"),"</li>",
"<li>Depth:",depth,"</li>",
"<li><a href=",data$features[i,]$properties$url,">More Details...</></li>",
"</ul>"))
}
my_map
my_map = Leaflet$new()
my_map$tileLayer(provider='Esri.WorldStreetMap')
my_map$setView(c(0, 0), zoom = 2)
for(i in 1:nrow(data$features)) {
longtitude <-  data$features[i,]$geometry$coordinates[[1]][1]
latitude <-  data$features[i,]$geometry$coordinates[[1]][2]
depth <-  data$features[i,]$geometry$coordinates[[1]][3]
# my_map$addCircleMarkers(data=cities.meta, radius = ~sqrt(10*PopClass),
#                  color = ~palfun(PopClass), stroke=FALSE, fillOpacity=0.5, layerId = ~Location)
# my_map$addCircleMarkers(data=c(latitude,longtitude), radius=data$features[i,]$properties$mag)
my_map$marker(c(latitude, longtitude),
bindPopup = paste(
"<ul>",
"<li>Place:",data$features[i,]$properties$place,"</li>",
"<li>Magnitude:",data$features[i,]$properties$mag,"</li>",
"<li>Time:",as.POSIXct(data$features[i,]$properties$time/1000, origin="1970-01-01"),"</li>",
"<li>Depth:",depth,"</li>",
"<li><a href=",data$features[i,]$properties$url,">More Details...</></li>",
"</ul>"))
}
my_map
my_map = Leaflet$new()
my_map$tileLayer(provider='Esri.WorldStreetMap')
my_map$setView(c(0, 0), zoom = 2)
for(i in 1:nrow(data$features)) {
longtitude <-  data$features[i,]$geometry$coordinates[[1]][1]
latitude <-  data$features[i,]$geometry$coordinates[[1]][2]
depth <-  data$features[i,]$geometry$coordinates[[1]][3]
# my_map$addCircleMarkers(data=cities.meta, radius = ~sqrt(10*PopClass),
#                  color = ~palfun(PopClass), stroke=FALSE, fillOpacity=0.5, layerId = ~Location)
# my_map$addCircleMarkers(data=c(latitude,longtitude), radius=data$features[i,]$properties$mag)
my_map$marker(c(latitude, longtitude),
bindPopup = paste(
"<ul>",
"<li>Place:",data$features[i,]$properties$place,"</li>",
"<li>Magnitude:",data$features[i,]$properties$mag,"</li>",
"<li>Time:",as.POSIXct(data$features[i,]$properties$time/1000, origin="1970-01-01"),"</li>",
"<li>Depth:",depth,"</li>",
"<li><a href=",data$features[i,]$properties$url,">More Details...</></li>",
"</ul>"),
options = list(radius=data$features[i,]$properties$mag))
}
my_map
data$metadata$count
my_map = Leaflet$new()
my_map$tileLayer(provider='Esri.WorldStreetMap')
my_map$setView(c(0, 0), zoom = 2)
for(i in 1:nrow(data$features)) {
longtitude <-  data$features[i,]$geometry$coordinates[[1]][1]
latitude <-  data$features[i,]$geometry$coordinates[[1]][2]
depth <-  data$features[i,]$geometry$coordinates[[1]][3]
# my_map$addCircleMarkers(data=cities.meta, radius = ~sqrt(10*PopClass),
#                  color = ~palfun(PopClass), stroke=FALSE, fillOpacity=0.5, layerId = ~Location)
# my_map$addCircleMarkers(data=c(latitude,longtitude), radius=data$features[i,]$properties$mag)
my_map$marker(c(latitude, longtitude),
bindPopup = paste(
"<ul>",
"<li>Place:",data$features[i,]$properties$place,"</li>",
"<li>Magnitude:",data$features[i,]$properties$mag,"</li>",
"<li>Time:",as.POSIXct(data$features[i,]$properties$time/1000, origin="1970-01-01"),"</li>",
"<li>Depth:",depth,"</li>",
"<li><a href=",data$features[i,]$properties$url,">More Details...</></li>",
"</ul>"),
options = list(radius=data$features[i,]$properties$mag*10))
}
my_map
my_map = Leaflet$new()
my_map$tileLayer(provider='Esri.WorldStreetMap')
my_map$setView(c(0, 0), zoom = 2)
for(i in 1:nrow(data$features)) {
longtitude <-  data$features[i,]$geometry$coordinates[[1]][1]
latitude <-  data$features[i,]$geometry$coordinates[[1]][2]
depth <-  data$features[i,]$geometry$coordinates[[1]][3]
# my_map$addCircleMarkers(data=cities.meta, radius = ~sqrt(10*PopClass),
#                  color = ~palfun(PopClass), stroke=FALSE, fillOpacity=0.5, layerId = ~Location)
# my_map$addCircleMarkers(data=c(latitude,longtitude), radius=data$features[i,]$properties$mag)
my_map$marker(c(latitude, longtitude),
bindPopup = paste(
"<ul>",
"<li>Place:",data$features[i,]$properties$place,"</li>",
"<li>Magnitude:",data$features[i,]$properties$mag,"</li>",
"<li>Time:",as.POSIXct(data$features[i,]$properties$time/1000, origin="1970-01-01"),"</li>",
"<li>Depth:",depth,"</li>",
"<li><a href=",data$features[i,]$properties$url,">More Details...</></li>",
"</ul>"))
}
my_map
install.packages("seismic")
install.packages("rseis")
install.packages("RSEIS")
library("RSEIS", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
RSEIS::demos()
RSEIS::demo()
my_map = Leaflet$new()
my_map$tileLayer(provider='Esri.WorldStreetMap')
my_map$setView(c(0, 0), zoom = 2)
for(i in 1:nrow(data$features)) {
longtitude <-  data$features[i,]$geometry$coordinates[[1]][1]
latitude <-  data$features[i,]$geometry$coordinates[[1]][2]
depth <-  data$features[i,]$geometry$coordinates[[1]][3]
# my_map$addCircleMarkers(data=cities.meta, radius = ~sqrt(10*PopClass),
#                  color = ~palfun(PopClass), stroke=FALSE, fillOpacity=0.5, layerId = ~Location)
# my_map$addCircleMarkers(data=c(latitude,longtitude), radius=data$features[i,]$properties$mag)
my_map$marker(c(latitude, longtitude),
bindPopup = paste(
"<ul>",
"<li>Place:",data$features[i,]$properties$place,"</li>",
"<li>Magnitude:",data$features[i,]$properties$mag,"</li>",
"<li>Time:",as.POSIXct(data$features[i,]$properties$time/1000, origin="1970-01-01"),"</li>",
"<li>Depth:",depth,"</li>",
"<li><a href=",data$features[i,]$properties$url,">More Details...</></li>",
"</ul>"))
}
my_map
data$features[i,]$properties
data$features
data$features
data$features
source('~/Documents/git/STAT40830/w6/getSeismicData.R')
library(magrittr)
library(jsonlite)
source('~/Documents/git/STAT40830/w6/getSeismicData.R')
source('~/Documents/git/STAT40830/w6/getSeismicData.R')
source('~/Documents/git/STAT40830/w6/getSeismicData.R')
data <- getSeismicData(timeFrame = 'PAST_WEEK', minMagnitude = 'all')
data
data$type
data$metadata
data$metadata$count
data  %>% select(cnt = metadata$count)
library(dplyr)
data  %>% select(cnt = metadata$count)
str(data$metadata)
summary <- list()
data <- getSeismicData(timeFrame = 'PAST_WEEK', minMagnitude = 'all')
getSummaryStats <- function(timeFrame = c('PAST_HOUR','PAST_DAY','PAST_WEEK','PAST_MONTH'),
minMagnitude = c('all','1.0','2.5','4.5')){
# data <- getSeismicData(timeFrame = 'PAST_WEEK', minMagnitude = 'all')
summary <- list()
summary$description <- data$metadata$title
summary$frequency <- data$metadata$count
return(summary)
}
getSummaryStats(timeFrame = 'PAST_HOUR', minMagnitude = 'all')
data$features
data$bbox
data$type
str(data$features)
data$features$properties
data$features$properties %>% str
data$features$properties %>% select(mag)
data$features$properties %>% select(mag,time)
data$features$properties %>% transmute(magnitude=mag,day=as.POSIXct(data$features[i,]$properties$time/1000, origin="1970-01-01"))
data$features$properties %>% transmute(magnitude=mag,day=as.POSIXct(time/1000, origin="1970-01-01"))
data$features$properties %>% transmute(magnitude=mag,day=round(as.POSIXct(time/1000, origin="1970-01-01")))
data$features$properties %>% transmute(magnitude=mag,day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days'))
data$features$properties$time
as.POSIXct(data$features$properties$time/1000, origin="1970-01-01")
str(as.POSIXct(data$features$properties$time/1000, origin="1970-01-01"))
round(as.POSIXct(data$features$properties$time/1000, origin="1970-01-01"),units='days')
unique(round(as.POSIXct(data$features$properties$time/1000, origin="1970-01-01"),units='days'))
data$features$properties$time %>% round(as.POSIXct(./1000, origin="1970-01-01"),units='days'))
data$features$properties$time
data$features$properties$time %>% round(as.POSIXct(./1000, origin="1970-01-01"),units='days'))
round(as.POSIXct(data$features$properties$time/1000, origin="1970-01-01"),units='days'))
round(as.POSIXct(data$features$properties$time/1000, origin="1970-01-01"),units='days')
data$features$properties$time %>% round(as.POSIXct(./1000, origin="1970-01-01"),units='days')
data$features$properties$time %>% ./1000 %>% round(as.POSIXct(, origin="1970-01-01"),units='days')
data$features$properties$time %>% ./1000 %>% round(as.POSIXct(., origin="1970-01-01"),units='days')
data$features$properties$time/1000 %>% round(as.POSIXct(., origin="1970-01-01"),units='days')
round(as.POSIXct(data$features$properties$time/1000, origin="1970-01-01"),units='days')
data$features$properties %>% transmute(magnitude=mag,day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days'))
round(as.POSIXct(data$features$properties$time/1000, origin="1970-01-01"),units='days')
group_by
?group_by
by_cyl <- group_by(mtcars, cyl)
by_cyl
round(as.POSIXct(data$features$properties$time/1000, origin="1970-01-01"),units='days')
round(as.POSIXct(data$features$properties$time/1000, origin="1970-01-01"),units='days')  %>% str
round(as.POSIXct(data$features$properties$time/1000, origin="1970-01-01"),units='days')  %>% as.integer
round(as.POSIXct(data$features$properties$time/1000, origin="1970-01-01"),units='days')  %>% as.numeric
source('~/Documents/git/STAT40830/w6/getSeismicData.R')
data <- getSeismicData(timeFrame = 'PAST_WEEK', minMagnitude = 'all')
library(dplyr)
data <- getSeismicData(timeFrame = 'PAST_WEEK', minMagnitude = 'all')
library(jsonlite)
data <- getSeismicData(timeFrame = 'PAST_WEEK', minMagnitude = 'all')
data$features$properties %>% transmute(magnitude=mag,day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.numeric)
data$features$properties %>% transmute(magnitude=mag,day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.numeric) %>% group_by(day)
?cut
cut(data$features$properties$mag,breaks=10)
cut(data$features$properties$mag,breaks=c(0:10))
cut(data$features$properties$mag,breaks=c(0:11))
data$features$properties$mag
?cut
?mean
cut(data$features$properties$mag,breaks=c(0:11), na.rm=TRUE)
max(data$features$properties$mag)
max(data$features$properties$mag,na.rm = TRUE)
ceiling(max(data$features$properties$mag,na.rm = TRUE))
cut(data$features$properties$mag,breaks=c(0:ceiling(max(data$features$properties$mag,na.rm = TRUE))), na.rm=TRUE)
data$features$properties %>% transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.numeric) %>% group_by(day)
data$features$properties %>% transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.numeric) %>% group_by(day,magnitude)
data$features$properties %>% transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.numeric) %>% group_by(day,magnitude) %>% summarise(count=n(),)
data$features$properties %>% transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.numeric) %>% group_by(day,magnitude) %>% summarise(count=n())
round(as.POSIXct(data$features$properties$time/1000, origin="1970-01-01"),units='days')  %>% as.character
data$features$properties %>% transmute(magnitude=mag,day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character %>% group_by(day)
)
data$features$properties %>% transmute(magnitude=mag,day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day)
data$features$properties %>% transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day,magnitude) %>% summarise(count=n())
install.packages('nycflights13') # Install if necessary
library(nycflights13) # Install if necessary
str(flights) # It's a tbl_df which means that it's a special kind of dplyr data frame
?arrange
pew = read_csv('https://raw.githubusercontent.com/hadley/tidyr/master/vignettes/pew.csv')
library(readr)
library(tidyr)
pew = read_csv('https://raw.githubusercontent.com/hadley/tidyr/master/vignettes/pew.csv')
# Look - read_csv. Automatically kept strings and read the column names correctly!
# Use spec(pew) to see exactly how it read everything in
glimpse(pew)
pew
pew2 = pew %>% gather(key = income,
value = frequency,
`<$10k`:`Don't know/refused`)
pew2
data$features$properties %>% transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day,magnitude) %>% summarise(count=n())
tb = read_csv("https://raw.githubusercontent.com/hadley/tidyr/master/vignettes/tb.csv")
tb2 = tb %>% gather(key = demographic,
value = cases,
-iso2, -year,
na.rm = TRUE)
tb
tb2
tb3 = tb2 %>% separate(col = demographic, # Original column
into = c("sex", "age"), # New columns to separate into
sep = 1) # sep value.
tb3
weather = read_csv("https://raw.githubusercontent.com/hadley/tidyr/master/vignettes/weather.csv")
glimpse(weather)
weather2 = weather %>% gather(key = day, # Create new variable day
value = value, # Create new variable called value
d1:d31, # Columns to gather up
na.rm = TRUE) # Remove all those horrible NAs
weather2
weather3 = weather2 %>%
mutate(day = parse_number(day)) %>% # Get rid of the 'd' in e.g. 'd3'
select(id, year, month, day, element, value) %>% # Order the columns
arrange(id, year, month, day) # Sort properly
weather3
weather4 = weather3 %>%
spread(key = element,
value = value) # Spread across element
weather4
?gather
weather3
weather4
data$features$properties %>% transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day,magnitude) %>% summarise(count=n())
weather3
weather4
weather3
data$features$properties %>% transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day,magnitude) %>% summarise(count=n())
data$features$properties %>% transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day,magnitude) %>% summarise(count=n()) %>% spread(key=magnitude, value=count)
data$features$properties
%>% transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day,magnitude)
%>% summarise(count=n())
%>% spread(key=magnitude, value=count)
data$features$properties %>% transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day,magnitude) %>% summarise(count=n()) %>% spread(key=magnitude, value=count)
df <- data$features$properties %>% transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day,magnitude) %>% summarise(count=n()) %>% spread(key=magnitude, value=count)
?rowSums
?rowNames
?colNames
??colNames
rownames(df) <- df$day
df
df %>% mutate(avg=rowSums(.[-day]))
?rowSums
df %>% mutate(avg=rowSums(.[-c(day)], na.rm=TRUE))
df %>% mutate(avg=rowSums(.[-c(day)], na.rm=TRUE))
df[-c(day)]
df[-c(day),]
df[,-1]
rowSums(df[,-1], na.rm=TRUE))
rowSums(df[,-1], na.rm=TRUE)
df$total <- rowSums(df[,-1], na.rm=TRUE)
df$total
df
?apply
data$features$properties
df
?apply
df$avg <- apply(df[,-1],1, 'mean',na.rm = TRUE)
df
df$avg <- round(apply(df[,-1],1, 'mean',na.rm = TRUE),0)
df
data <- getSeismicData(timeFrame = 'PAST_MONTH', minMagnitude = 'all')
data$metadata$count
df <- data$features$properties %>% transmute(magnitude=cut(mag,breaks=c(0:ceiling(max(mag,na.rm = TRUE))), na.rm=TRUE),day=round(as.POSIXct(time/1000, origin="1970-01-01"),units='days') %>% as.character) %>% group_by(day,magnitude) %>% summarise(count=n()) %>% spread(key=magnitude, value=count)
df
df$total <- round(apply(df[,-1],1, 'sum',na.rm = TRUE),0)
df$avg <- round(apply(df[,-1],1, 'mean',na.rm = TRUE),0)
df
df[is.na(df)] <- 0
df
