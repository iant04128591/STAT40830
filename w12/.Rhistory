class_rf = resample(class_learn.over,
task = bc_task,
resampling = desc,
measures = list(mmce, auc))
bench_rf = benchmark(class_learn.over, bc_task, desc)
getBMRPerformances(bench_rf) #mis classification estimate
all_out = getBMRPredictions(bench_rf, as.df = TRUE)
head(all_out)
all_out %>% select(response, truth) %>% table
bc_task = makeClassifTask(id = "bc", data = bc2, target = "Class")
bc_task
class_learn = makeLearner("classif.randomForest",
predict.type = "prob", # Get predicted probabilities
fix.factors.prediction = TRUE) # Don't know why this isn't the default - stops factor levels from being dropped during training
class_learn.over = makeOversampleWrapper(class_learn, osw.rate = 1.9)
desc = makeResampleDesc("CV", iters = 5)
class_rf = resample(class_learn.over,
task = bc_task,
resampling = desc,
measures = list(mmce, auc))
bench_rf = benchmark(class_learn.over, bc_task, desc)
getBMRPerformances(bench_rf) #mis classification estimate
all_out = getBMRPredictions(bench_rf, as.df = TRUE)
head(all_out)
all_out %>% select(response, truth) %>% table
bc_task = makeClassifTask(id = "bc", data = bc2, target = "Class")
bc_task
class_learn = makeLearner("classif.randomForest",
predict.type = "prob", # Get predicted probabilities
fix.factors.prediction = TRUE) # Don't know why this isn't the default - stops factor levels from being dropped during training
class_learn.over = makeOversampleWrapper(class_learn, osw.rate = 1.9)
desc = makeResampleDesc("CV", iters = 5)
class_rf = resample(class_learn.over,
task = bc_task,
resampling = desc,
measures = list(mmce, auc))
bench_rf = benchmark(class_learn.over, bc_task, desc)
getBMRPerformances(bench_rf) #mis classification estimate
all_out = getBMRPredictions(bench_rf, as.df = TRUE)
head(all_out)
all_out %>% select(response, truth) %>% table
set.seed(123)
bc_task = makeClassifTask(id = "bc", data = bc2, target = "Class")
bc_task
class_learn = makeLearner("classif.randomForest",
predict.type = "prob", # Get predicted probabilities
fix.factors.prediction = TRUE) # Don't know why this isn't the default - stops factor levels from being dropped during training
class_learn.over = makeOversampleWrapper(class_learn, osw.rate = 1.9)
desc = makeResampleDesc("CV", iters = 5)
class_rf = resample(class_learn.over,
task = bc_task,
resampling = desc,
measures = list(mmce, auc))
bench_rf = benchmark(class_learn.over, bc_task, desc)
getBMRPerformances(bench_rf) #mis classification estimate
all_out = getBMRPredictions(bench_rf, as.df = TRUE)
head(all_out)
all_out %>% select(response, truth) %>% table
set.seed(123)
bc_task = makeClassifTask(id = "bc", data = bc2, target = "Class")
bc_task
class_learn = makeLearner("classif.randomForest",
predict.type = "prob", # Get predicted probabilities
fix.factors.prediction = TRUE) # Don't know why this isn't the default - stops factor levels from being dropped during training
class_learn.over = makeOversampleWrapper(class_learn, osw.rate = 1.9)
desc = makeResampleDesc("CV", iters = 5)
class_rf = resample(class_learn.over,
task = bc_task,
resampling = desc,
measures = list(mmce, auc))
bench_rf = benchmark(class_learn.over, bc_task, desc)
getBMRPerformances(bench_rf) #mis classification estimate
all_out = getBMRPredictions(bench_rf, as.df = TRUE)
head(all_out)
all_out %>% select(response, truth) %>% table
set.seed(123)
bc_task = makeClassifTask(id = "bc", data = bc2, target = "Class")
bc_task
class_learn = makeLearner("classif.randomForest",
predict.type = "prob", # Get predicted probabilities
fix.factors.prediction = TRUE) # Don't know why this isn't the default - stops factor levels from being dropped during training
class_learn.over = makeOversampleWrapper(class_learn, osw.rate = 1.9)
desc = makeResampleDesc("CV", iters = 5)
class_rf = resample(class_learn.over,
task = bc_task,
resampling = desc,
measures = list(mmce, auc))
bench_rf = benchmark(class_learn.over, bc_task, desc)
getBMRPerformances(bench_rf) #mis classification estimate
all_out = getBMRPredictions(bench_rf, as.df = TRUE)
head(all_out)
all_out %>% select(response, truth) %>% table
?makeOversampleWrapper
bc_task = makeClassifTask(id = "bc", data = bc2, target = "Class")
bc_task
class_learn = makeLearner("classif.randomForest",
predict.type = "prob", # Get predicted probabilities
fix.factors.prediction = TRUE) # Don't know why this isn't the default - stops factor levels from being dropped during training
class_learn.over = makeOversampleWrapper(class_learn, osw.rate = 1.9)
desc = makeResampleDesc("CV", iters = 5)
class_rf = resample(class_learn.over,
task = bc_task,
resampling = desc,
measures = list(mmce, auc))
str(class_rf)
bench_rf = benchmark(class_learn.over, bc_task, desc)
getBMRPerformances(bench_rf) #mis classification estimate
all_out = getBMRPredictions(bench_rf, as.df = TRUE)
head(all_out)
all_out %>% select(response, truth) %>% table
performance(predict(mod, newdata = bc2), measures = list(mmce, ber, auc))
performance(predict(class_rf, newdata = bc2), measures = list(mmce, ber, auc))
set.seed(123)
bc_task = makeClassifTask(id = "bc", data = bc2, target = "Class")
bc_task
class_learn = makeLearner("classif.randomForest",
predict.type = "prob", # Get predicted probabilities
fix.factors.prediction = TRUE) # Don't know why this isn't the default - stops factor levels from being dropped during training
class_learn.over = makeOversampleWrapper(class_learn, osw.rate = 1.9)
desc = makeResampleDesc("CV", iters = 5)
class_rf = resample(class_learn.over,
task = bc_task,
resampling = desc,
measures = list(mmce, auc))
str(class_rf)
bench_rf = benchmark(class_learn.over, bc_task, desc)
getBMRPerformances(bench_rf) #mis classification estimate
all_out = getBMRPredictions(bench_rf, as.df = TRUE)
head(all_out)
all_out %>% select(response, truth) %>% table
set.seed(123)
bc_task = makeClassifTask(id = "bc", data = bc2, target = "Class")
bc_task
class_learn = makeLearner("classif.randomForest",
predict.type = "prob", # Get predicted probabilities
fix.factors.prediction = TRUE) # Don't know why this isn't the default - stops factor levels from being dropped during training
class_learn.over = makeOversampleWrapper(class_learn, osw.rate = 1.9)
desc = makeResampleDesc("CV", iters = 5)
class_rf = resample(class_learn.over,
task = bc_task,
resampling = desc,
measures = list(mmce, auc))
str(class_rf)
bench_rf = benchmark(class_learn.over, bc_task, desc)
getBMRPerformances(bench_rf) #mis classification estimate
all_out = getBMRPredictions(bench_rf, as.df = TRUE)
head(all_out)
all_out %>% select(response, truth) %>% table
set.seed(123)
bc_task = makeClassifTask(id = "bc", data = bc2, target = "Class")
bc_task
class_learn = makeLearner("classif.randomForest",
predict.type = "prob", # Get predicted probabilities
fix.factors.prediction = TRUE) # Don't know why this isn't the default - stops factor levels from being dropped during training
class_learn.over = makeOversampleWrapper(class_learn, osw.rate = 1.9)
desc = makeResampleDesc("CV", iters = 5)
class_rf = resample(class_learn.over,
task = bc_task,
resampling = desc,
measures = list(mmce, auc))
str(class_rf)
bench_rf = benchmark(class_learn.over, bc_task, desc)
getBMRPerformances(bench_rf) #mis classification estimate
all_out = getBMRPredictions(bench_rf, as.df = TRUE)
head(all_out)
all_out %>% select(response, truth) %>% table
getBMRPerformances(bench_rf) #mis classification estimate
bc2 %>% head
?train
train(class_learn.over, bc_task)
?makeOversampleWrapper
table(class_learn.over)
all_out %>% select(response, truth) %>% table
bc2 %>% str
bc2  %>% head
bc2  %>% dim
bc_task = makeClassifTask(id = "bc", data = bc2, target = "Class")
bc_task
class_learn = makeLearner("classif.randomForest",
predict.type = "prob", # Get predicted probabilities
fix.factors.prediction = TRUE) # Don't know why this isn't the default - stops factor levels from being dropped during training
desc = makeResampleDesc("CV", iters = 5)
library(ROCR)
class_rf = resample(class_learn,
task = bc_task,
resampling = desc,
measures = list(mmce, auc))
str(class_rf)
# You can get even more information by running benchmark
bench_rf = benchmark(class_learn, bc_task, desc)
getBMRPerformances(bench_rf) #mis classification estimate
all_out = getBMRPredictions(bench_rf, as.df = TRUE)
head(all_out)
all_out %>% select(response, truth) %>% table
?resample
set.seed(123)
bc2 %>% head
bc_task = makeClassifTask(id = "bc", data = bc2, target = "Class")
bc_task
class_learn = makeLearner("classif.randomForest",
predict.type = "prob", # Get predicted probabilities
fix.factors.prediction = TRUE) # Don't know why this isn't the default - stops factor levels from being dropped during training
class_learn.over = makeOversampleWrapper(class_learn, osw.rate = 1.9)
class_learn.over
class_learn.over = makeOversampleWrapper(class_learn, osw.rate = 1.9)
desc = makeResampleDesc("CV", iters = 5)
class_rf = resample(class_learn.over,
task = bc_task,
resampling = desc,
measures = list(mmce, auc))
str(class_rf)
bench_rf = benchmark(class_learn.over, bc_task, desc)
getBMRPerformances(bench_rf) #mis classification estimate
all_out = getBMRPredictions(bench_rf, as.df = TRUE)
head(all_out)
all_out %>% select(response, truth) %>% table
performance(predict(class_rf, newdata = bc2), measures = list(mmce, ber, auc))
str(class_rf)
class_rf
class_rf$pred
class_rf$pred %>% select(response, truth) %>% table
class_rf$pred
class_rf$pred %>% select(response, truth)
class_rf$pred
class_rf$aggr
class_rf$extract
class_rf$measures.train
class_rf$pred
str(class_rf$pred)
str(class_rf$pred$data
)
class_rf$pred$data
class_rf$pred$data %>% select(response, truth) %>% table
set.seed(123)
bc2 %>% head
bc_task = makeClassifTask(id = "bc", data = bc2, target = "Class")
bc_task
class_learn = makeLearner("classif.randomForest",
predict.type = "prob", # Get predicted probabilities
fix.factors.prediction = TRUE) # Don't know why this isn't the default - stops factor levels from being dropped during training
class_learn.over = makeOversampleWrapper(class_learn, osw.rate = 1.9)
desc = makeResampleDesc("CV", iters = 5)
class_rf = resample(class_learn.over,
task = bc_task,
resampling = desc,
measures = list(mmce, auc))
str(class_rf)
class_rf$pred$data %>% select(response, truth) %>% table
bench_rf = benchmark(class_learn.over, bc_task, desc)
getBMRPerformances(bench_rf) #mis classification estimate
all_out = getBMRPredictions(bench_rf, as.df = TRUE)
head(all_out)
all_out %>% select(response, truth) %>% table
set.seed(123)
bc2 %>% head
bc_task = makeClassifTask(id = "bc", data = bc2, target = "Class")
bc_task
class_learn = makeLearner("classif.randomForest",
predict.type = "prob", # Get predicted probabilities
fix.factors.prediction = TRUE) # Don't know why this isn't the default - stops factor levels from being dropped during training
class_learn.over = makeOversampleWrapper(class_learn, osw.rate = 2.9)
desc = makeResampleDesc("CV", iters = 5)
class_rf = resample(class_learn.over,
task = bc_task,
resampling = desc,
measures = list(mmce, auc))
str(class_rf)
class_rf$pred$data %>% select(response, truth) %>% table
set.seed(123)
bc2 %>% head
bc_task = makeClassifTask(id = "bc", data = bc2, target = "Class")
bc_task
class_learn = makeLearner("classif.randomForest",
predict.type = "prob", # Get predicted probabilities
fix.factors.prediction = TRUE) # Don't know why this isn't the default - stops factor levels from being dropped during training
class_learn.over = makeOversampleWrapper(class_learn, osw.rate = 4)
desc = makeResampleDesc("CV", iters = 5)
class_rf = resample(class_learn.over,
task = bc_task,
resampling = desc,
measures = list(mmce, auc))
str(class_rf)
class_rf$pred$data %>% select(response, truth) %>% table
set.seed(123)
bc2 %>% head
bc_task = makeClassifTask(id = "bc", data = bc2, target = "Class")
bc_task
class_learn = makeLearner("classif.randomForest",
predict.type = "prob", # Get predicted probabilities
fix.factors.prediction = TRUE) # Don't know why this isn't the default - stops factor levels from being dropped during training
class_learn.over = makeOversampleWrapper(class_learn, osw.rate = 14)
desc = makeResampleDesc("CV", iters = 5)
class_rf = resample(class_learn.over,
task = bc_task,
resampling = desc,
measures = list(mmce, auc))
str(class_rf)
class_rf$pred$data %>% select(response, truth) %>% table
bh2 = BostonHousing2[,-c(1, 2, 6)]
bc2 = BreastCancer[,-c(1,7)] # Col 7 has missing values
data('BostonHousing2')
# Not so big: 506 cases and 19 variables
# y = medv - median value of home
# X = all other variables except cmedv, tract and town
bh2 = BostonHousing2[,-c(1, 2, 6)]
# Classificaton
data("BreastCancer")
# 699 cases and 11 variables
# Consider:
# y = Class (benign vs malignant)
# X = all other variables (minus ID)
bc2 = BreastCancer[,-c(1,7)] # Col 7 has missing values
set.seed(123)
bc2 %>% head
bc_task
bc_task = makeClassifTask(id = "bc", data = bc2, target = "Class")
bc_task
class_learn = makeLearner("classif.randomForest",
predict.type = "prob", # Get predicted probabilities
fix.factors.prediction = TRUE) # Don't know why this isn't the default - stops factor levels from being dropped during training
class_learn.over = makeOversampleWrapper(class_learn, osw.rate = 1.9)
desc = makeResampleDesc("CV", iters = 5)
class_rf = resample(class_learn.over,
task = bc_task,
resampling = desc,
measures = list(mmce, auc))
str(class_rf)
class_rf$pred$data %>% select(response, truth) %>% table
class_learn_over = makeOversampleWrapper(class_learn, osw.rate = 1.9)
desc = makeResampleDesc("CV", iters = 5)
class_rf = resample(class_learn_over,
task = bc_task,
resampling = desc,
measures = list(mmce, auc))
str(class_rf)
class_rf$pred$data %>% select(response, truth) %>% table
class_rf$pred$data %>% select(response, truth) %>% table
bench_rf = benchmark(class_learn.over, bc_task, desc)
getBMRPerformances(bench_rf) #mis classification estimate
all_out = getBMRPredictions(bench_rf, as.df = TRUE)
head(all_out)
all_out %>% select(response, truth) %>% table
install.packages("sparklyr")
library(sparklyr)
spark_available_versions()
spark_install(version = '2.0.1', hadoop_version = '2.7')
sc = spark_connect(master = "local") # Might take a few seconds to connect
library(dplyr)
library(nycflights13)
flights_tbl = copy_to(sc, flights)
src_tbls(sc)
flights_tbl %>% filter(dep_delay == 2)
delay = flights_tbl %>%
group_by(tailnum) %>%
summarise(count = n(), dist = mean(distance), delay = mean(arr_delay)) %>%
filter(count > 20, dist < 2000, !is.na(delay)) %>%
collect()
delay
library(ggplot2)
ggplot(delay, aes(dist, delay)) +
geom_point(aes(size = count), alpha = 1/2) +
geom_smooth() +
scale_size_area(max_size = 2)
?spark_connect
library(DBI)
iris_preview = dbGetQuery(sc, "SELECT * FROM iris LIMIT 10")
library(DBI)
iris_preview = dbGetQuery(sc, "SELECT * FROM iris LIMIT 10")
iris_preview = dbGetQuery(sc, "SELECT * FROM flights LIMIT 10")
iris_preview
dbGetQuery(sc, "SELECT * FROM iris LIMIT 10")
dbGetQuery(sc, "SELECT * FROM flights LIMIT 10")
dbGetQuery(sc, "SELECT distinct year FROM flights")
dbGetQuery(sc, "SELECT dep_time year FROM flights")
dbGetQuery(sc, "SELECT * FROM flights LIMIT 10")
dbGetQuery(sc, "SELECT carrier year FROM flights")
dbGetQuery(sc, "SELECT * FROM flights LIMIT 10")
dbGetQuery(sc, "SELECT origin year FROM flights")
dbGetQuery(sc, "SELECT distinct origin FROM flights")
dbGetQuery(sc, "SELECT * FROM flights LIMIT 10")
dbGetQuery(sc, "SELECT hour,count(1) freq  FROM flights group by hour")
dbGetQuery(sc, "SELECT hour,count(1) freq  FROM flights group by hour order by 2 desc")
partitions = flights_tbl %>%
select(hour, carrier, origin, dest, distance, arr_delay) %>%
filter(arr_delay < 100) %>% # Some hugely delayed flights
na.omit %>%
sdf_partition(training = 0.99, test = 0.01, seed = 123)
partitions
fit_lasso = partitions$training %>%
ml_linear_regression(response = "arr_delay",
features = c("carrier",
"origin",
"dest",
"distance",
"hour"),
alpha = 1)
summary(fit_lasso)
summary(fit_lasso)
partitions
summary(fit_lasso)
pred_lasso = sdf_predict(fit_lasso, partitions$test) %>% collect
library(magrittr)
pred_lasso %$% cor(arr_delay, prediction)
ggplot(pred_lasso, aes(x = arr_delay, y = prediction)) +
geom_abline(lty = 'dashed', col = 'red') +
geom_smooth() +
geom_point()
# Not a great model, but still might be useful.
fit_rf = partitions$training %>%
ml_random_forest(response = "arr_delay",
features = c("carrier",
"origin",
"dest",
"distance",
"hour"))
summary(fit_rf) # Not very helpful
pred_rf = sdf_predict(fit_rf, partitions$test) %>% collect
pred_rf %$% cor(arr_delay, prediction) # RF very slightly better
pred_lasso %$% cor(arr_delay, prediction)
ggplot(pred_rf, aes(x = arr_delay, y = prediction)) +
geom_abline(lty = 'dashed', col = 'red') +
geom_smooth() +
geom_point()
library(mlbench)
data("BreastCancer")
bc2 = BreastCancer[,-c(1,7)]
bc2$Class = as.integer(bc2$Class == 'malignant')
bc2_tbl = copy_to(sc, bc2, overwrite = TRUE) # Note the .s have been changed to _
bc2_tbl = copy_to(sc, bc2, overwrite = TRUE) # Note the .s have been changed to _
bc_part = bc2_tbl %>%
sdf_partition(training = 0.75, test = 0.25, seed = 123)
bc_part
fit_rf = bc_part$training %>% ml_gradient_boosted_trees(response = "Class",features = -c("Class"))
colnames(bc_part$training)
fit_rf = bc_part$training %>% ml_gradient_boosted_trees(
response = "Class",
features = c("Cl_thickness","Cell_size","Cell_shape","Marg_adhesion","Epith_c_size","Bl_cromatin","Normal_nucleoli","Mitoses" )
)
summary(fit_rf)
pred_rf = sdf_predict(fit_rf, bc_part$test) %>% collect
pred_rf
ml_binary_classification_eval(pred_rf)
pred_rf = sdf_predict(fit_rf, bc_part$test) %>% collect
ml_binary_classification_eval(pred_rf)
pred_rf
ml_binary_classification_eval(pred_rf)
fit_rf = bc_part$training %>% ml_gradient_boosted_trees(
response = "Class",
features = c("Cl_thickness","Cell_size","Cell_shape","Marg_adhesion","Epith_c_size","Bl_cromatin","Normal_nucleoli","Mitoses" )
)
summary(fit_rf)
pred_rf = sdf_predict(fit_rf, bc_part$test)
ml_binary_classification_eval(pred_rf)
pred_rf
ml_binary_classification_eval(pred_rf, label="Class")
ml_binary_classification_eval(pred_rf, label="Class", score="prediction")
if ("package:h2o" %in% search()) detach("package:h2o", unload=TRUE)
if ("h2o" %in% rownames(installed.packages())) remove.packages("h2o")
# Next, we download R package dependencies
pkgs <- c("methods","statmod","stats","graphics",
"RCurl","jsonlite","tools","utils")
for (pkg in pkgs) {
if (!(pkg %in% rownames(installed.packages()))) install.packages(pkg)
}
# Download h2o package version 3.10.0.6
install.packages("h2o", type = "source",
repos = "http://h2o-release.s3.amazonaws.com/h2o/rel-turing/6/R")
library(h2o)
library(devtools)
devtools::install_github("h2oai/sparkling-water", subdir = "/r/rsparkling")
library(sparklyr)
spark_install(version = "1.6.2")
library(rsparkling)
library(dplyr)
options(rsparkling.sparklingwater.version = '1.6.7')
#sc = spark_connect("local")
sc = spark_connect("local", version = "1.6.2")
library(readr)
library(magrittr)
library(nycflights13)
flights2 = flights %>%
select(hour, carrier, origin, dest, distance, arr_delay) %>%
filter(arr_delay < 100) %>% # Some hugely delayed flights
mutate_each(funs(as.factor), carrier, origin, dest) %$%
# DL doesn't like categorical variables so convert to factors
model.matrix(~ hour + carrier + origin + dest + distance + arr_delay - 1) %>%
as_data_frame
flights2
flights2 = copy_to(sc, flights2)
src_tbls(sc)
flights3 = as_h2o_frame(sc, flights2)
splits = h2o.splitFrame(flights3, seed = 123)
flights3 = as_h2o_frame(sc, flights2)
spark_install(version = "1.6.2")
?spark_install
spark_available_versions()
?spark_connect
spark_disconnect(sc)
sc = spark_connect("local", version = "1.6.2")
library(readr)
library(magrittr)
library(nycflights13)
flights2 = flights %>%
select(hour, carrier, origin, dest, distance, arr_delay) %>%
filter(arr_delay < 100) %>% # Some hugely delayed flights
mutate_each(funs(as.factor), carrier, origin, dest) %$%
# DL doesn't like categorical variables so convert to factors
model.matrix(~ hour + carrier + origin + dest + distance + arr_delay - 1) %>%
as_data_frame
flights2 = copy_to(sc, flights2)
src_tbls(sc)
flights3 = as_h2o_frame(sc, flights2)
