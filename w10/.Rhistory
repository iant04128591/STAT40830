tau_sq_grid = seq(0.1, 2, length = 500)
tau_sq_grid
tau_sq_grid = seq(0.1, 2, length = 500)
for(i in 1:500) sig_ll[i] = GP_ll(c(0, 0, tau_sq_grid[i]))
plot(sig_sq_grid, sig_ll, type = 'l') # Perhaps 5 isn't the best value?
p
answer_NR = nlminb(start = rep(0, 3), objective = GP_ll2)
GP_ll2(answer_NR$par) # A much better job!
GP_ll2(log(c(5, 10, 2)))
?nlminb
?optim
?nlminb
answer_NR = nlminb(start = rep(0, 3), objective = GP_ll2, lower=c(0,0,0.1), upper=c(0,0,2))
GP_ll2(answer_NR$par) # A much better job!
answer_NR = nlminb(start = rep(0, 3), objective = GP_ll2, lower=c(0,0,0.1), upper=c(0,0,2))
GP_ll2(answer_NR$par) # A much better job!
answer_NR
tau_sq_grid = seq(0.1, 2, length = 500)
iters <-500
tau_sq_grid = seq(0.1, 2, length = iters)
cntr <- 1
iters
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp, control = list(eval.max = iters,iter.max = iters))
iters <-500
tau_sq_grid = seq(0.1, 2, length = iters)
cntr <- 1
GP_ll2_tmp = function(p) {
sig_sq = exp(p[1])
rho_sq = exp(p[2])
tau_sq = tau_sq_grid[cntr]
cntr = cntr + 1
Mu = rep(0, length(x))
Sigma = sig_sq * exp( - rho_sq * outer(x, x, '-')^2 ) + tau_sq * diag(length(x))
ll = dmvnorm(y, Mu, Sigma, log = TRUE)
return(-ll)
}
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp, control = list(eval.max = iters,iter.max = iters))
answer_NR
GP_ll2_tmp(answer_NR)
GP_ll2_tmp(answer_NR)
GP_ll2_tmp(answer_NR$par)
cntr
iters <-500
tau_sq_grid = seq(0.1, 2, length = iters)
cntr <- 1
GP_ll2_tmp = function(p) {
sig_sq = exp(p[1])
rho_sq = exp(p[2])
tau_sq = tau_sq_grid[cntr]
cntr = cntr + 1
Mu = rep(0, length(x))
Sigma = sig_sq * exp( - rho_sq * outer(x, x, '-')^2 ) + tau_sq * diag(length(x))
ll = dmvnorm(y, Mu, Sigma, log = TRUE)
return(-ll)
}
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp, control = list(eval.max = iters,iter.max = iters))
cntr
iters <-500
tau_sq_grid = seq(0.1, 2, length = iters)
cntr <- 1
GP_ll2_tmp = function(p) {
sig_sq = exp(p[1])
rho_sq = exp(p[2])
tau_sq = tau_sq_grid[cntr]
cntr <- cntr + 1
print(paste(cntr,tau_sq))
Mu = rep(0, length(x))
Sigma = sig_sq * exp( - rho_sq * outer(x, x, '-')^2 ) + tau_sq * diag(length(x))
ll = dmvnorm(y, Mu, Sigma, log = TRUE)
return(-ll)
}
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp, control = list(eval.max = iters,iter.max = iters))
GP_ll2_tmp(answer_NR$par)
answer_NR$par
tau_sq_grid
answer_NR = nlminb(start = rep(0, 3), objective = GP_ll2)
GP_ll2(answer_NR$par) # A much better job!
iters <-500
tau_sq_grid = seq(0.1, 2, length = iters)
cntr <- 1
GP_ll2_tmp = function(p) {
sig_sq = exp(p[1])
rho_sq = exp(p[2])
tau_sq = tau_sq_grid[cntr]
cntr <<- cntr + 1
print(paste(cntr,tau_sq))
Mu = rep(0, length(x))
Sigma = sig_sq * exp( - rho_sq * outer(x, x, '-')^2 ) + tau_sq * diag(length(x))
ll = dmvnorm(y, Mu, Sigma, log = TRUE)
return(-ll)
}
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp, control = list(eval.max = iters,iter.max = iters))
GP_ll2_tmp(answer_NR$par)
answer_NR
GP_ll2_tmp(answer_NR$par)
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp, control = list(eval.max = iters,iter.max = iters))
GP_ll2_tmp(answer_NR$par)
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp, control = list(eval.max = iters,iter.max = iters))
GP_ll2_tmp(answer_NR$par)
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp, control = list(eval.max = iters,iter.max = iters))
GP_ll2_tmp(answer_NR$par)
iters <-500
tau_sq_grid = seq(0.1, 2, length = iters)
cntr <- 1
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp, control = list(eval.max = iters,iter.max = iters))
GP_ll2_tmp(answer_NR$par)
iters <-500
tau_sq_grid = seq(0.1, 2, length = iters)
cntr <- 1
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp, control = list(eval.max = iters,iter.max = iters))
GP_ll2_tmp(answer_NR$par)
iters <-500
tau_sq_grid = seq(0.1, 2, length = iters)
cntr <- 1
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp, control = list(eval.max = iters,iter.max = iters))
GP_ll2_tmp(answer_NR$par)
iters <-500
tau_sq_grid = seq(0.1, 2, length = iters)
cntr <- 1
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp, control = list(eval.max = iters,iter.max = iters))
GP_ll2_tmp(answer_NR$par)
GP_ll2_tmp = function(p) {
sig_sq = exp(p[1])
rho_sq = exp(p[2])
tau_sq = tau_sq_grid[cntr]
cntr <<- cntr + 1
Mu = rep(0, length(x))
Sigma = sig_sq * exp( - rho_sq * outer(x, x, '-')^2 ) + tau_sq * diag(length(x))
ll = dmvnorm(y, Mu, Sigma, log = TRUE)
return(-ll)
}
iters <-500
tau_sq_grid = seq(0.1, 2, length = iters)
cntr <- 1
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp, control = list(eval.max = iters,iter.max = iters))
GP_ll2_tmp(answer_NR$par)
tau_sq_grid[cntr]
round(tau_sq_grid[cntr],3)
GP_ll2_tmp = function(p) {
sig_sq = exp(p[1])
rho_sq = exp(p[2])
tau_sq = tau_sq_grid[cntr]
cntr <<- cntr + 1
Mu = rep(0, length(x))
Sigma = sig_sq * exp( - rho_sq * outer(x, x, '-')^2 ) + tau_sq * diag(length(x))
ll = dmvnorm(y, Mu, Sigma, log = TRUE)
return(-ll)
}
iters <-500
tau_sq_grid = seq(0.1, 2, length = iters)
cntr <- 1
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp)
GP_ll2_tmp(answer_NR$par)
round(tau_sq_grid[cntr],3)
GP_ll2_tmp(answer_NR$par)
GP_ll2_tmp = function(p) {
sig_sq = exp(p[1])
rho_sq = exp(p[2])
tau_sq = tau_sq_grid[cntr]
cntr <<- cntr + 1
Mu = rep(0, length(x))
Sigma = sig_sq * exp( - rho_sq * outer(x, x, '-')^2 ) + tau_sq * diag(length(x))
ll = dmvnorm(y, Mu, Sigma, log = TRUE)
print(-ll)
return(-ll)
}
iters <-500
tau_sq_grid = seq(0.1, 2, length = iters)
cntr <- 1
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp)
GP_ll2_tmp(answer_NR$par)
cntr
answer_NR
GP_ll2_tmp(answer_NR$par)
round(tau_sq_grid[4],3)
GP_ll2_tmp = function(p) {
sig_sq = exp(p[1])
rho_sq = exp(p[2])
tau_sq = tau_sq_grid[cntr]
cntr <<- cntr + 1
Mu = rep(0, length(x))
Sigma = sig_sq * exp( - rho_sq * outer(x, x, '-')^2 ) + tau_sq * diag(length(x))
ll = dmvnorm(y, Mu, Sigma, log = TRUE)
print(paste(cntr,tau_sq,-ll))
return(-ll)
}
iters <-500
tau_sq_grid = seq(0.1, 2, length = iters)
cntr <- 1
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp)
GP_ll2_tmp = function(p) {
sig_sq = exp(p[1])
rho_sq = exp(p[2])
tau_sq = tau_sq_grid[cntr]
cntr <<- cntr
Mu = rep(0, length(x))
Sigma = sig_sq * exp( - rho_sq * outer(x, x, '-')^2 ) + tau_sq * diag(length(x))
ll = dmvnorm(y, Mu, Sigma, log = TRUE)
print(paste(cntr,tau_sq,-ll))
return(-ll)
}
iters <-500
tau_sq_grid = seq(0.1, 2, length = iters)
cntr <- 1
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp)
GP_ll2_tmp = function(p) {
sig_sq = exp(p[1])
rho_sq = exp(p[2])
tau_sq = tau_sq_grid[cntr]
Mu = rep(0, length(x))
Sigma = sig_sq * exp( - rho_sq * outer(x, x, '-')^2 ) + tau_sq * diag(length(x))
ll = dmvnorm(y, Mu, Sigma, log = TRUE)
print(paste(cntr,tau_sq,-ll))
cntr <<- cntr + 1
return(-ll)
}
iters <-500
tau_sq_grid = seq(0.1, 2, length = iters)
cntr <- 1
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp)
GP_ll2_tmp(answer_NR$par)
round(tau_sq_grid[4],3)
answer_NR
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp)
answer_NR
iters <-500
tau_sq_grid = seq(0.1, 2, length = iters)
cntr <- 1
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp)
source('~/Documents/git/STAT40830/w2/lecture_2.R', echo=TRUE)
iters <-500
tau_sq_grid = seq(0.1, 2, length = iters)
cntr <- 1
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp)
answer_NR
iters <-500
tau_sq_grid = seq(0.1, 2, length = iters)
cntr <- 1
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp)
answer_NR
iters <-500
tau_sq_grid = seq(0.1, 2, length = iters)
cntr <- 1
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp)
answer_NR
iters <-500
tau_sq_grid = seq(0.1, 2, length = iters)
cntr <- 1
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp)
answer_NR
answer_NR = nlminb(start = rep(0, 3), objective = GP_ll2)
answer_NR
iters <-500
tau_sq_grid = seq(0.1, 2, length = iters)
cntr <- 1
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp, control = list(eval.max = 500))
answer_NR
iters <-500
tau_sq_grid = seq(0.1, 2, length = iters)
cntr <- 1
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp, control = list(eval.max = 500))
answer_NR
iters <-500
tau_sq_grid = seq(0.1, 2, length = iters)
cntr <- 1
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp, control = list(eval.max = 500))
answer_NR
iters <-500
tau_sq_grid = seq(0.1, 2, length = iters)
cntr <- 1
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp, control = list(eval.max = 500,abs.tol = 1e-20))
answer_NR
iters <-500
tau_sq_grid = seq(0.1, 2, length = iters)
cntr <- 1
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp, control = list(eval.max = 500,abs.tol = 1e-20))
answer_NR
iters <-500
tau_sq_grid = seq(0.1, 2, length = iters)
cntr <- 1
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp, control = list(eval.max = 500,abs.tol = 1e-20))
answer_NR
iters <-500
tau_sq_grid = seq(0.1, 2, length = iters)
cntr <- 1
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp, control = list(eval.max = 500,abs.tol = 1e-20))
answer_NR
iters <-500
tau_sq_grid = seq(0.1, 2, length = iters)
cntr <- 1
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp, control = list(eval.max = 500,abs.tol = 1e-20))
answer_NR
GP_ll2_tmp(answer_NR$par)
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp, control = list(eval.max = 500,abs.tol = 1e-20,rel.tol=1e-20,x.tol=1e-20))
answer_NR
iters <-500
tau_sq_grid = seq(0.1, 2, length = iters)
cntr <- 1
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp, control = list(eval.max = 500,abs.tol = 1e-20,rel.tol=1e-20,x.tol=1e-20))
answer_NR
iters <-500
tau_sq_grid = seq(0.1, 2, length = iters)
cntr <- 1
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp, control = list(eval.max = 500,abs.tol = 1e-20,rel.tol=1e-10,x.tol=1e-20))
answer_NR
answer_NR = nlminb(start = rep(0, 3), objective = GP_ll2)
GP_ll2(answer_NR$par) # A much better job!
answer_NR
answer_NR = nlminb(start = rep(0, 3), objective = GP_ll2_tmp)
answer_NR
iters <-500
tau_sq_grid = seq(0.1, 2, length = iters)
cntr <- 1
answer_NR = nlminb(start = rep(0, 3), objective = GP_ll2_tmp)
answer_NR = nlminb(start = rep(0, 3), objective = GP_ll2)
answer_NR
iters <-500
tau_sq_grid = seq(0.1, 2, length = iters)
cntr <- 1
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp)
answer_NR
cntr
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp)
answer_NR
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp)
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp)
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp)
?nlminb
min_ll_prev = Inf
GP_ll2_tmp = function(p) {
sig_sq = exp(p[1])
rho_sq = exp(p[2])
tau_sq = tau_sq_grid[cntr]
Mu = rep(0, length(x))
Sigma = sig_sq * exp( - rho_sq * outer(x, x, '-')^2 ) + tau_sq * diag(length(x))
ll = dmvnorm(y, Mu, Sigma, log = TRUE)
print(paste(cntr,tau_sq,-ll))
cntr <<- cntr + 1
if(min_ll_prev > -ll){
min_ll_prev <<- -ll
min_tau_idx <<- cntr
}
return(-ll)
}
GP_ll2_tmp = function(p) {
sig_sq = exp(p[1])
rho_sq = exp(p[2])
tau_sq = tau_sq_grid[cntr]
Mu = rep(0, length(x))
Sigma = sig_sq * exp( - rho_sq * outer(x, x, '-')^2 ) + tau_sq * diag(length(x))
ll = dmvnorm(y, Mu, Sigma, log = TRUE)
print(paste(cntr,tau_sq,-ll))
cntr <<- cntr + 1
if(min_ll_prev > -ll){
min_ll_prev <<- -ll
min_tau_idx <<- cntr
}
return(-ll)
}
iters <-500
min_tau_idx = -1
min_ll_prev = Inf
tau_sq_grid = seq(0.1, 2, length = iters)
cntr <- 1
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp)
answer_NR
min_tau_idx
GP_ll2_tmp = function(p) {
sig_sq = exp(p[1])
rho_sq = exp(p[2])
tau_sq = tau_sq_grid[cntr]
Mu = rep(0, length(x))
Sigma = sig_sq * exp( - rho_sq * outer(x, x, '-')^2 ) + tau_sq * diag(length(x))
ll = dmvnorm(y, Mu, Sigma, log = TRUE)
print(paste(cntr,tau_sq,-ll))
if(min_ll_prev > -ll){
min_ll_prev <<- -ll
min_tau_idx <<- cntr
}
cntr <<- cntr + 1
return(-ll)
}
iters <-500
min_tau_idx = -1
min_ll_prev = Inf
tau_sq_grid = seq(0.1, 2, length = iters)
cntr <- 1
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp)
answer_NR
min_tau_idx
min_ll_prev
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp)
min_tau_idx
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp)
min_tau_idx
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp)
min_tau_idx
answer_NR = nlminb(start = rep(0, 2), objective = GP_ll2_tmp)
min_tau_idx
round(tau_sq_grid[min_tau_idx],3)
n = 100000
a = 65539
M = 2^31
b = 0
x = rep(1, n)
for (i in 2:n) x[i] = (a * x[i-1] + b) %% M
u = x/(M-1)
hist(u, breaks = 30) # Pretty good
qqplot((1:n - 0.5) / n, sort(u)) # Also good!
acf(u) # Also also good
qqplot((1:n - 0.5) / n, sort(u)) # Also good!
U = data.frame(u1 = u[1:(n-2)],
u2 = u[2:(n-1)],
u3 = u[3:n])
plot(U$u1,U$u2,pch=".") # Any patterns?
library(lattice)
cloud(u1 ~ u2 * u3, U, pch=".", col = 1,
screen = list(z = 40, x = -70, y = 0)) # Starts to look a little bit suspicious
cloud(u1 ~ u2 * u3, U, pch=".", col=1, screen = list(z = 40, x = 70, y = 0))
a = 69069
b = 1
M = 2^32
x = rep(1, n)
for (i in 2:n) x[i] = (a * x[i-1] + b) %% M
u = x/(M-1)
U = data.frame(u1 = u[1:(n-2)],
u2 = u[2:(n-1)],
u3 = u[3:n])
cloud(u1 ~ u2 * u3, U, pch=".", col = 1,
screen = list(z = 40, x = -70, y = 0)) # Much better
X_1 = X_2 = Y = rep(1, n)
M_1 = 2^32 - 209
M_2 = 2^32 - 22853
for(i in 4:n) {
X_1[i] = (1403580 * X_1[i-2] - 810728 * X_1[i-3]) %% M_1
X_2[i] = (527612 * X_2[i-1] - 1370589 * X_2[i-3]) %% M_2
}
Y = (X_1 - X_2) %% M_1
u = Y/(M_1-1)
hist(u, breaks = 100)
qqplot((1:n - 0.5) / n, sort(u))
acf(u)
plot(U$u1,U$u2,pch=".")
U = data.frame(u1 = u[1:(n-2)],
u2 = u[2:(n-1)],
u3 = u[3:n])
cloud(u1 ~ u2 * u3, U, pch=".", col=1, screen = list(z = 40, x = 70, y = 0))
# The period length for this is about 2^191 = 3.2 * 10^57
X = qnorm(u)
hist(X)
X = qgamma(u, shape = 1)
hist(X)
u
str(u)
length(u)
for(i in 1:length(u)){
print(i)
}
1 < 2
1 < 2 < 4
cntr <- 0
for(i in 2:length(u)){
if(u[i-1] < u[i+1] && u[i+1] < u[i]){
cntr <- cntr + 1
}
}
print(cntr)
cntr
cntr <- 0
for(i in 2:length(u)-1){
if(u[i-1] < u[i+1] && u[i+1] < u[i]){
cntr <- cntr + 1
}
}
print(cntr)
U
M
x
n
x <- rep(NA,n)
x
M
x <- rep(NA,n)
x[1] <- 1
x[2] <- 1
for(i in 3:n){
x[i] = (x[i-1] + x[i-2]) %% M
}
cntr <- 0
for(i in 2:length(x)-1){
if(x[i-1] < x[i+1] && x[i+1] < x[i]){
cntr <- cntr + 1
}
}
print(cntr)
x
cntr <- 0
for(i in 2:length(u)-1){
if(u[i-1] < u[i+1] && u[i+1] < u[i]){
cntr <- cntr + 1
}
}
print(cntr)
cntr <- 0
for(i in 2:length(u)-1){
if(u[i-1] < u[i+1] && u[i+1] < u[i]){
cntr <- cntr + 1
print(paste(u[i-1], u[i+1], u[i]))
}
}
print(cntr)
print(cntr/length(u))
